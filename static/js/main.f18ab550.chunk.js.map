{"version":3,"sources":["serviceWorker.ts","features/Application/ApplicationCommonAction.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/selectors.tsx","utils/redux-utils.ts","api/todolistsAPI.ts","features/Auth/Login.tsx","utils/error-utils.ts","features/Auth/auth-reducer.ts","features/Auth/index.tsx","app/selectors.ts","features/Application/application-reduser.ts","features/Application/index.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoLists/todolists-reducer.ts","features/TodoLists/index.ts","features/TodoLists/Todolist/tasks-reducer.ts","features/TodoLists/Todolist/index.tsx","features/TodoLists/Todolist/Task/Task.tsx","features/TodoLists/Todolist/Todolist.tsx","features/TodoLists/TodoLists.tsx","app/App.tsx","app/reducers.ts","app/store.ts","index.tsx","features/TodoLists/Todolist/Todolist.module.css"],"names":["Boolean","window","location","hostname","match","setAppStatus","createAction","setAppError","Alert","React","props","ref","elevation","variant","ErrorSnackbar","error","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","isOpen","Stack","spacing","sx","width","Snackbar","open","autoHideDuration","onClose","severity","selectIsLoggedIn","auth","isLoggedIn","useActions","actions","useMemo","bindActionCreators","TaskStatuses","TaskPriorities","useAppDispatch","Login","formik","useFormik","validate","values","errors","password","length","email","test","initialValues","rememberMe","onSubmit","formikHelpers","a","authActions","login","action","rejected","payload","fieldsErrors","setFieldError","field","resetForm","to","Grid","container","justifyContent","style","marginTop","Paper","padding","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","color","fontSize","fontWeight","lineHeight","type","FormControlLabel","control","Checkbox","checked","Button","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleAsyncServerAppError","thunkAPI","showError","messages","status","rejectWithValue","handleAsyncServerNetworkError","message","createAsyncThunk","param","res","resultCode","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","authAsyncActions","selectStatus","selectInitialized","isInitialized","initializeApp","appReducer","appActions","AddItemForm","memo","addItem","disabled","useState","setTitle","setError","addTask","trim","className","helperText","onChange","e","currentTarget","onKeyPress","key","IconButton","size","onClick","Add","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","fetchTodolists","todolists","removeTodoList","changeTodolistEntityStatus","addTodoList","todolist","item","changeTodoListTitle","changeTodoListFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","todoListsActions","fetchTasks","todoListId","tasks","items","removeTask","updateTask","getState","task","find","t","description","priority","startDate","deadline","domainModel","forEach","tasksActions","tasksAsyncActions","tasksSlice","tasksReducer","Task","onRemoveHandler","useCallback","onChangeTitleHandler","onChecked","Completed","New","isDone","display","alignItems","position","right","Delete","Todolist","useEffect","onFilterClickBtn","removeTodo","onAddTaskAsync","helper","thunk","errorMessage","onChangeTodoListTitleHandler","newTitle","taskForToDoList","renderFilterButton","currentColor","text","TodoList","TodoTitle","Tasks","direction","TodoLists","addTodoListAsync","paddingBottom","App","authSelectors","logoutHandler","AppBar","Toolbar","Box","edge","Menu","Typography","component","LinearProgress","Container","fixed","path","element","height","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.f18ab550.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {ErrorType, RequestStatusType} from \"./types\";\r\n\r\nexport const setAppStatus = createAction<{ status: RequestStatusType }>('app/setAppStatus')\r\nexport const setAppError = createAction<{ error: ErrorType }>('app/setAppError')\r\n","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState, ErrorType} from \"../../features/Application/types\";\r\nimport {setAppError} from \"../../features/Application/ApplicationCommonAction\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar = () => {\r\n    const error = useSelector<AppRootState, ErrorType>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError({error: null}))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}\r\n","import {AppRootState} from \"../Application/types\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootState) => state.auth.isLoggedIn\r\n","import {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"../features/Application/types\";\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n}\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ac5021a6-6592-4dfc-bd91-07a05b477711'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType< {item:TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model:TaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{id: number, email: string, login:string}>>('auth/me')\r\n    }\r\n}\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = {field: string, error: string}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type TaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {Paper} from \"@mui/material\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {authActions} from \"./\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: values => {\r\n            type ErrorsType = {\r\n                password: string\r\n                email: string\r\n            }\r\n            const errors = {} as ErrorsType;\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length > 20) {\r\n                errors.password = 'Must be 20 characters or less';\r\n            }\r\n            if (!values.email) {\r\n                errors.email = ' Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(authActions.login(values))\r\n            if (authActions.login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n    return (\r\n        <Grid container justifyContent={'center'} style={{marginTop: '40px'}}>\r\n            <Paper elevation={2} style={{padding: \"15px\",}}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'}\r\n                                   rel=\"noreferrer\">\r\n                                    here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField label=\"Email\"\r\n                                       margin=\"normal\"\r\n                                       {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.errors.email ? <div style={{\r\n                                color: 'red',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                lineHeight: '14px'\r\n                            }}>{formik.errors.email}</div> : null}\r\n                            <TextField type=\"password\"\r\n                                       label=\"Password\"\r\n                                       margin=\"normal\"\r\n                                       {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {formik.errors.password ? <div style={{\r\n                                color: 'red',\r\n                                fontSize: '14px',\r\n                                fontWeight: '600',\r\n                                lineHeight: '14px'\r\n                            }}>{formik.errors.password}</div> : null}\r\n                            <FormControlLabel label={'Remember me'}\r\n                                              control={<Checkbox/>}\r\n                                              {...formik.getFieldProps(\"rememberMe\")}\r\n                                              checked={formik.values.rememberMe}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n","import {ResponseType} from \"../api/todolistsAPI\";\r\nimport {AxiosError} from \"axios\";\r\nimport {setAppError, setAppStatus} from \"../features/Application/ApplicationCommonAction\";\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: error.message ? error.message : \"Some error occurred\"}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: [error.message]})\r\n}\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n","import {authAPI, LoginParamsType} from \"../../api/todolistsAPI\";\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError,\r\n} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setAppStatus} from \"../Application/ApplicationCommonAction\";\r\nimport {ThunkError} from \"../Application/types\";\r\n\r\n\r\n\r\nconst login = createAsyncThunk<undefined, LoginParamsType, ThunkError>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await authAPI.logout()\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","import { Login } from './Login'\r\nimport * as authSelectors from './selectors'\r\nimport {asyncActions as authAsyncActions} from \"./auth-reducer\";\r\nimport {slice} from \"./auth-reducer\";\r\n\r\nconst authReducer = slice.reducer\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    authSelectors,\r\n    authReducer,\r\n    authActions,\r\n    Login\r\n}\r\n","import {AppRootState} from \"../features/Application/types\";\r\n\r\nexport const selectStatus = (state: AppRootState) => state.app.status\r\nexport const selectInitialized = (state: AppRootState) => state.app.isInitialized\r\n\r\n","import {authAPI} from \"../../api/todolistsAPI\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {ErrorType, RequestStatusType} from \"./types\";\r\nimport {setAppError, setAppStatus} from \"./ApplicationCommonAction\";\r\nimport {authActions} from \"../Auth\"\r\n\r\nconst {setIsLoggedIn} = authActions\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({value: true}))\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"application\",\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as ErrorType,\r\n        isInitialized: false\r\n    },\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n        builder.addCase(setAppStatus, (state, action) => {\r\n            state.status = action.payload.status\r\n        })\r\n        builder.addCase(setAppError, (state, action) => {\r\n            state.error = action.payload.error\r\n        })\r\n    }\r\n})\r\n\r\n\r\n\r\n","import * as appSelectors from '../../app/selectors'\r\nimport {slice, asyncActions} from \"./application-reduser\";\r\n\r\nconst appReducer = slice.reducer\r\nconst appActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    appReducer,\r\n    appActions,\r\n    appSelectors\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport style from \"./AddItemForm.module.css\"\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {Add} from \"@mui/icons-material\";\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void }\r\ntype AddItemFormType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormType) => {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            if (title.trim() === \"\") {\r\n                setError(\"Title is required\")\r\n                return\r\n            }\r\n            addItem(title.trim(), {setError, setTitle})\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n    const addTask = async () => {\r\n        if (title.trim() === \"\") {\r\n            setError(\"Title is required\")\r\n            return\r\n        }\r\n        try {\r\n            await addItem(title.trim(), {setError, setTitle})\r\n            setTitle(\"\")\r\n        } catch (error: any) {\r\n            setError(error.message)\r\n        }\r\n    }\r\n    return <div className={style.AddItemForm}>\r\n        <TextField error={!!error}\r\n                   disabled={disabled}\r\n                   helperText={error}\r\n                   label={\"type value\"}\r\n                   variant={\"outlined\"}\r\n                   value={title}\r\n                   onChange={onNewTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n        />\r\n        <IconButton size={\"small\"} onClick={addTask} color={\"primary\"} disabled={disabled}>\r\n            <Add/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n                ? <TextField onBlur={activateViewMode} onChange={onChangeTitleHandler} value={title} autoFocus/>\r\n                : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {todolistsAPI, TodolistType} from \"../../api/todolistsAPI\";\r\nimport {RequestStatusType, ThunkError} from \"../Application/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from \"../../utils/error-utils\";\r\nimport {setAppStatus} from \"../Application/ApplicationCommonAction\";\r\nimport {FilterValuesType, TodolistDomainType} from \"./types\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst fetchTodolists = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodoLists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst removeTodoList = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodoLists', async (id, {dispatch}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatus({id, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(id)\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id}\r\n})\r\nconst addTodoList = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodoLists', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst changeTodoListTitle = createAsyncThunk('todolists/changeTodoListTitle',\r\n    async (param: { id: string, title: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {id: param.id, title: param.title}\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error: any) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    })\r\n\r\n\r\nexport const slice = createSlice({\r\n        name: \"todolists\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            changeTodoListFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].filter = action.payload.filter\r\n            },\r\n            changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].entityStatus = action.payload.status\r\n            },\r\n        },\r\n        extraReducers: builder => {\r\n            builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            builder.addCase(removeTodoList.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state.splice(index, 1)\r\n            })\r\n            builder.addCase(addTodoList.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            builder.addCase(changeTodoListTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n        }\r\n    }\r\n)\r\n\r\nconst {changeTodolistEntityStatus} = slice.actions\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    removeTodoList,\r\n    addTodoList,\r\n    changeTodoListTitle,\r\n}\r\n","import {asyncActions, slice} from \"./todolists-reducer\";\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const todoListsActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n","import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {TaskModelType, TaskType, todolistsAPI} from \"../../../api/todolistsAPI\";\r\nimport {AppRootState, ThunkError} from \"../../Application/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../../utils/error-utils\";\r\nimport {setAppStatus} from \"../../Application/ApplicationCommonAction\";\r\nimport {TaskStateType, UpdateTaskModelType} from \"../types\";\r\nimport {todoListsActions} from '../index'\r\n\r\nconst {addTodoList, fetchTodolists, removeTodoList} = todoListsActions\r\nconst initialState: TaskStateType = {}\r\n\r\nconst fetchTasks = createAsyncThunk<{todoListId: string, tasks: TaskType[]}, string, ThunkError>('tasks/fetchTasks', async (todoListId, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todoListId)\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todoListId, tasks: res.data.items}\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n\r\n})\r\nconst removeTask = createAsyncThunk<{todoListId: string, taskId: string}, { todoListId: string, taskId: string }, ThunkError>('tasks/removeTask', async (param) => {\r\n    await todolistsAPI.deleteTask(param.todoListId, param.taskId)\r\n    return {todoListId: param.todoListId, taskId: param.taskId}\r\n})\r\nconst addTask = createAsyncThunk<TaskType, { todoListId: string, title: string }, ThunkError>\r\n('tasks/addTask', async (param,\r\n                         thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistsAPI.createTask(param.todoListId, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst updateTask = createAsyncThunk('tasks/updateTask',\r\n    async (param: { todoListId: string, taskId: string, domainModel: UpdateTaskModelType },\r\n           thunkAPI) => {\r\n        const state = thunkAPI.getState() as AppRootState\r\n        const task = state.tasks[param.todoListId].find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return thunkAPI.rejectWithValue(\"task not found in the state\")\r\n        }\r\n        const model: TaskModelType = {\r\n            status: task.status,\r\n            title: task.title,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...param.domainModel\r\n        }\r\n        const res = await todolistsAPI.updateTask(param.todoListId, param.taskId, model)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                return param\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n            }\r\n        } catch (error: any) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    })\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\nexport const slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodoList.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(removeTodoList.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n","import {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\n\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\n\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksReducer,\r\n    tasksActions,\r\n}\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport style from \"../Todolist.module.css\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolistsAPI\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {tasksActions} from \"../index\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n}\r\nexport const Task = React.memo(({task, todoListId}: TaskPropsType) => {\r\n\r\n    const {removeTask, updateTask} = useActions(tasksActions)\r\n\r\n    const onRemoveHandler = useCallback(() => removeTask({\r\n        todoListId,\r\n        taskId: task.id\r\n    }), [removeTask, todoListId, task.id])\r\n\r\n    const onChangeTitleHandler = useCallback((title: string) => updateTask({\r\n        todoListId,\r\n        taskId: task.id,\r\n        domainModel: {title}\r\n    }), [updateTask, todoListId, task.id])\r\n\r\n    const onChecked = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        updateTask({todoListId, taskId: task.id, domainModel: {status}})\r\n    }, [updateTask, todoListId, task.id])\r\n\r\n    return (\r\n        <div key={task.id + task.title} className={task.status === TaskStatuses.Completed ? style.isDone : \"\"} style={{display: 'flex', alignItems: 'center', position: 'relative'}}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                onChange={onChecked}\r\n            />\r\n            <EditableSpan title={task.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onRemoveHandler} aria-label=\"delete\" size={\"small\"} style={{position: 'absolute', right: '5px'}}>\r\n                <Delete fontSize='small'/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {OverridableStringUnion} from \"@mui/types\";\r\nimport {Button, IconButton, Stack} from \"@mui/material\";\r\nimport style from \"./Todolist.module.css\"\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolistsAPI\";\r\nimport {tasksActions} from \"./index\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\nimport {AppRootState} from \"../../Application/types\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../types\";\r\nimport {todoListsActions} from \"../index\";\r\n\r\ntype PropsTodoListType = {\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const Todolist = React.memo(({\r\n                                        todolist,\r\n                                    }: PropsTodoListType) => {\r\n    const tasks = useSelector<AppRootState, Array<TaskType>>(state => state.tasks[todolist.id])\r\n    const {fetchTasks} = useActions(tasksActions)\r\n\r\n    const {changeTodoListFilter, removeTodoList, changeTodoListTitle} = useActions(todoListsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n    useEffect(() => {\r\n        if (!tasks.length) {\r\n            fetchTasks(todolist.id)\r\n        }\r\n\r\n    }, [todolist.id, fetchTasks, tasks.length])\r\n\r\n    const onFilterClickBtn = useCallback((filter: FilterValuesType) => changeTodoListFilter({id: todolist.id, filter}),\r\n        [changeTodoListFilter, todolist.id])\r\n\r\n    const removeTodo = useCallback(() => removeTodoList(todolist.id),\r\n        [todolist.id, removeTodoList])\r\n\r\n    const onAddTaskAsync = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        const thunk = tasksActions.addTask({todoListId: todolist.id, title})\r\n        const res = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(res)) {\r\n            if (res.payload?.errors?.length) {\r\n                const errorMessage = res.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError(\"Some error occurred\")\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [todolist.id, dispatch])\r\n\r\n    const onChangeTodoListTitleHandler = useCallback((newTitle: string) => changeTodoListTitle({\r\n        id: todolist.id,\r\n        title: newTitle\r\n    }), [todolist.id, changeTodoListTitle])\r\n\r\n    let taskForToDoList: Array<TaskType> = tasks\r\n    switch (todolist.filter) {\r\n        case \"completed\":\r\n            taskForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            break\r\n        case \"active\":\r\n            taskForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n            break\r\n    }\r\n\r\n    const renderFilterButton = (\r\n        filter: FilterValuesType,\r\n        currentColor: OverridableStringUnion<'inherit' | 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning'>,\r\n        text: string\r\n    ) => {\r\n        return (\r\n            <Button variant={todolist.filter === filter ? \"contained\" : \"outlined\"}\r\n                    onClick={() => onFilterClickBtn(filter)}\r\n                    size=\"small\"\r\n                    color={currentColor}\r\n            >\r\n                {text}\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    return <div className={style.TodoList}>\r\n        <div className={style.TodoTitle}>\r\n            <b><EditableSpan title={todolist.title} onChange={onChangeTodoListTitleHandler}/></b>\r\n            <IconButton aria-label=\"delete\" onClick={removeTodo} disabled={todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={onAddTaskAsync} disabled={todolist.entityStatus === 'loading'}/>\r\n        <div className={style.Tasks}>\r\n            {taskForToDoList.map(t => {\r\n                    return (\r\n                        <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todoListId={todolist.id}\r\n                        />\r\n                    )\r\n                }\r\n            )}\r\n            {!taskForToDoList.length && <div>No tasks</div>}\r\n        </div>\r\n        <div style={{marginTop: '15px'}}>\r\n            <Stack direction=\"row\" spacing={2}>\r\n                {renderFilterButton('all', 'primary', 'All')}\r\n                {renderFilterButton('active', 'success', 'Active')}\r\n                {renderFilterButton('completed', 'secondary', 'Completed')}\r\n            </Stack>\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport { Todolist } from \"./Todolist/Todolist\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {AppRootState} from \"../Application/types\";\r\nimport {TodolistDomainType} from \"./types\";\r\nimport {todoListsActions} from \"./index\";\r\n\r\n\r\nexport const TodoLists: React.FC = React.memo(() => {\r\n    const todolists = useSelector<AppRootState, Array<TodolistDomainType>>(state => state.todolists)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const {fetchTodolists} = useActions(todoListsActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const addTodoListAsync = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n            const thunk = todoListsActions.addTodoList(title)\r\n            const res = await dispatch(thunk)\r\n            if (todoListsActions.addTodoList.rejected.match(res)) {\r\n                if (res.payload?.errors?.length) {\r\n                    const errorMessage = res.payload?.errors[0]\r\n                    helper.setError(errorMessage)\r\n                } else {\r\n                    helper.setError(\"Some error occurred\")\r\n                }\r\n            } else {\r\n                helper.setTitle('')\r\n            }\r\n        }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if ( !isLoggedIn) {\r\n            return\r\n        }\r\n        if(!todolists.length) {\r\n            fetchTodolists()\r\n        }\r\n\r\n    }, [fetchTodolists, isLoggedIn, todolists.length])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container justifyContent={'center'} style={{marginTop: '40px'}}>\r\n                <Paper elevation={2} style={{padding: \"15px\"}}>\r\n                    <h3>Add task list</h3>\r\n                    <AddItemForm addItem={addTodoListAsync}/>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid container spacing={3} justifyContent={'center'} style={{marginTop: '30px'}}>\r\n                {\r\n                    todolists.map((tl) => {\r\n                        return (\r\n                            <Grid key={tl.id} item style={{paddingBottom: '20px'}}>\r\n                                <Paper key={tl.id} elevation={2} style={{padding: \"15px\"}}>\r\n                                    <Todolist\r\n                                        todolist={tl}\r\n                                        key={tl.id}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Box,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login, authActions, authSelectors} from \"../features/Auth\";\r\nimport {selectInitialized, selectStatus} from \"./selectors\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\nimport {appActions} from \"../features/Application\";\r\nimport {TodoLists} from \"../features/TodoLists/TodoLists\";\r\n\r\n\r\nexport const App: React.FC = React.memo(() => {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if(!isInitialized) {\r\n            initializeApp()\r\n        }\r\n\r\n    }, [initializeApp, isInitialized])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [logout])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <Box sx={{display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%', height: '100vh'}}>\r\n                <CircularProgress/>\r\n            </Box>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <Box sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'space-between',\r\n                        width: '100%'\r\n                    }}>\r\n                        <Box sx={{display: 'flex', alignItems: 'center'}}>\r\n                            <IconButton edge={\"start\"} color={\"inherit\"} aria-label={\"menu\"}>\r\n                                <Menu/>\r\n                            </IconButton>\r\n                            <Typography variant={\"h6\"} component={\"div\"} >\r\n                                News\r\n                            </Typography>\r\n                        </Box>\r\n                        {\r\n                            isLoggedIn &&\r\n                            <Button onClick={logoutHandler} color={\"inherit\"}>\r\n                                Log out\r\n                            </Button>\r\n                        }\r\n                    </Box>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodoLists />}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to={\"/404\"}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {authReducer} from \"../features/Auth\";\r\nimport {appReducer} from \"../features/Application\";\r\nimport {todolistsReducer} from \"../features/TodoLists\";\r\nimport {tasksReducer} from \"../features/TodoLists/Todolist\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n})\r\n","import thunk from \"redux-thunk\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {rootReducer} from \"./reducers\";\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nif (process.env.NODE_ENV !== 'development' && module.hot) {\r\n    module.hot.accept('./reducers', () => {\r\n        store.replaceReducer(rootReducer)\r\n    })\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n        , document.getElementById('root'));\r\n}\r\nrerenderEntireTree()\r\n\r\nif (process.env.NODE_ENV !== 'development' && module.hot) {\r\n    module.hot.accept('./app/App', () => {\r\n        rerenderEntireTree()\r\n    })\r\n\r\n}\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"Todolist_TodoList__VKZxX\",\"TodoTitle\":\"Todolist_TodoTitle__2L1zr\",\"Tasks\":\"Todolist_Tasks__1YIF7\",\"isDone\":\"Todolist_isDone__1Vqqb\"};"],"sourceRoot":""}